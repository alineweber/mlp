# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Vinculação de Estocagem
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Memória, do binário até a execução (1)

#+ATTR_LATEX: :width .7\linewidth
[[./code-data-stack-heap-1.png]]

* Memória, do binário até a execução (2)

#+ATTR_LATEX: :width .7\linewidth
[[./code-data-stack-heap-2.png]]

* Memória, do binário até a execução (3)

#+ATTR_LATEX: :width .7\linewidth
[[./code-data-stack-heap-3.png]]

* Memória, do binário até a execução (4)

#+ATTR_LATEX: :width .7\linewidth
[[./code-data-stack-heap-4.png]]

* Memória, do binário até a execução (5)

#+ATTR_LATEX: :width .7\linewidth
[[./code-data-stack-heap-5.png]]

* Memória, do binário até a execução (6)

#+ATTR_LATEX: :width .7\linewidth
[[./code-data-stack-heap-6.png]]

* Memória, do binário até a execução (7)

#+ATTR_LATEX: :width .7\linewidth
[[./code-data-stack-heap-7.png]]

* Memória, do binário até a execução (8)

#+ATTR_LATEX: :width .7\linewidth
[[./code-data-stack-heap-8.png]]
* Pilha -- Registro de Ativação (frame)                            :noexport:
+ Vamos supor o seguinte trecho de código
  #+begin_src C
  int foo (int a1, int a2, int a3) {
     int c;
  }

  int main (int argc, char **argv){
     foo (1, 2, 3);
  }
  #+end_src
+ Como o Registro de Ativação é construído?
* Vinculação de Estocagem
#+BEGIN_CENTER
Associando uma variável a um espaço de memória

*Tempo de Vida* de uma variável (período do vínculo)
#+END_CENTER

#+latex: \vfill
Tipos
+ Estática
+ Dinâmica
  + Pilha (/stack/)
  + Monte (/heap/)
    + Explícitas
    + Implícitas

* Estática
Vinculação é feita antes do tempo de execução (segmento de dados)

Se mantém do início ao fim, e não muda
#+latex: \vfill
\pause Vantanges
+ Endereçamento direto, Alocação única

+ \pause Subprogramas sensíveis ao histórico
    #+begin_src C
    int conta ()
    {
       static int meu_contador = 0;
       meu_contador += 1;
       return meu_contador;
    }
    #+end_src
\pause Desvantagens
+ Falta de flexibilidade (se houver somente estática) \\
+ Recursão é impossível
+ Compartilhamento
* Estática (Exemplos)
** Texto                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

Globais, Locais com =static=,

atributos estáticos de classe

#+latex: {\scriptsize
#+BEGIN_SRC C :tangle exemplo1.c :exports none
#include <stdio.h>
int y;
void foo ()
{
  static int x1;
  int x2;
  printf ("y = %d\n", y);
}
int main (int argc, char **argv)
{
  static int x1;
  foo();
  return 0;
}
#+END_SRC
#+latex: }
=gcc -c exemplo1.c=

=nm exemplo1.o=

Notem as duas variáveis =x1= em BSS

Notem que =y= é um símbolo comum

** Figura                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

#+ATTR_LATEX: :width \linewidth
[[./code-data-stack-heap-8.png]]

* Dinâmica na Pilha

#+BEGIN_CENTER
Vinculação é feita em tempo de execução na pilha

(variáveis automáticas)
#+END_CENTER

\pause

#+latex: {\tiny
#+begin_src C
int fib (n) {
  int n1 = n - 1;
  int n2 = n - 2;
  switch (n){
    case 0: return 1;
    case 1: return 1;
    default: return fib(n1) + fib(n2);
  }
}
#+end_src
#+latex: }

\pause Cada instância de =fib= tem um *frame* na pilha
+ =n1= e =n2= são alocados nela
+ Vínculo existe durante a execução de =fib(n)= \\
  Quando retorna, o frame é desalocado, vínculo desfeito

Vantagens
- Flexibilidade (recursão já é possível)
- Segurança

Desvantagens
- Endereçamento relativo, mas _calculado em tempo de compilação_.
- Alocação a cada execução do bloco

* Dinâmica na Pilha (Exemplos)
** Texto                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:
Parâmetros e Variáveis Locais (não =static=)

#+latex: \vfill

#+latex: {\scriptsize
=gcc -g -O0 -rdynamic exemplo2.c=
#+latex: }

Observar registros de ativação

#+latex: {\scriptsize
=gdb ./a.out= # (info frame)
#+latex: }

#+latex: {\tiny
#+BEGIN_SRC C :tangle exemplo2.c :exports none
#include <execinfo.h>
#include <stdio.h>
#include <stdlib.h>

void print_trace (void) {
  void *array[10];
  size_t size;
  char **strings;
  size_t i;
  size = backtrace (array, 10);
  strings = backtrace_symbols (array, size);
  printf ("%zd registros de ativacao.\n", size);
  for (i = 0; i < size; i++)
    printf ("%s\n", strings[i]);
  free (strings);
}

void foo (void) {
  print_trace ();
}
     
int main (void) {
  foo ();
  return 0;
}     
#+END_SRC
#+latex: }

** Figura                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+ATTR_LATEX: :width \linewidth
[[./code-data-stack-heap-8.png]]

* Dinâmica no Monte

#+BEGIN_CENTER
Vinculação é feita em tempo de execução no monte
#+END_CENTER

#+latex: \vfill

_Explícita_ (programador)
#+begin_src C
int *p = malloc (sizeof(int));
*p = 3;
free(p);
#+end_src
#+begin_src Objective-C
PajeSimulator *simulator = [[PajeSimulator alloc] init];
[simulator release];
#+end_src
#+begin_src C++
QBoxLayout *topLayout = new QBoxLayout ();
delete topLayout;
#+end_src

_Implícita_ (linguagem)
#+begin_src Javascript
highs = [20, 23, 18, 15, 30];
#+end_src
* Dinâmica no Monte (Exemplos)
** Texto                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:

Referências e Ponteiros

#+latex: {\scriptsize
#+BEGIN_SRC C :tangle exemplo3.c :exports none
#include <stdio.h>
#include <stdlib.h>
int main (int argc, char **argv)
{
  int *x = malloc(sizeof(int));
  *x = 2;
  free(x);
  *x = 3;
  return 0;
}
#+END_SRC
$ =gcc -g -O0 -rdynamic exemplo3.c= \\
$ =valgrind ./a.out=
#+latex: }

#+latex: \vspace{1cm}

Quando _Implícitas_ (custo escondido)
  + Vetores dinâmicos em Algol
  + Linguagens de script interpretadas
  + Linguagens Funcionais e Lógicas
** Figura                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+ATTR_LATEX: :width \linewidth
[[./code-data-stack-heap-8.png]]

* Tempo de vida de uma variável
** Texto                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
+ Estática
+ Dinâmica
  + Pilha
  + Monte
    + Explícitas
    + Implícitas
** Figura                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

#+ATTR_LATEX: .3\linewidth
[[./code-data-stack-heap-8.png]]

